# zshrc/parts.d/50-ssh
#
# ssh configuration for zsh
#
# Copyright Â© 2008 martin f. krafft <madduck@madduck.net>
# Released under the terms of the Artistic Licence 2.0
#
# Source repository: git://git.madduck.net/etc/ssh.git
#

# populate hosts completion with SSH's known_hosts
if [ -r $HOME/.ssh/known_hosts ]; then
  local _myhosts
  _myhosts=(${${(ps: :)${(pj: :)${(f)"$(cat $HOME/.ssh/known_hosts)"}%%\ *}//,/ }:#[0-9]*})
  zstyle ':completion:*' hosts $_myhosts
  unset _myhosts
fi

local _NEW_KNOWN_HOSTS=~/.ssh/known_hosts.NEW
alias ssh="{ [[ -f $_NEW_KNOWN_HOSTS ]] && warn $_NEW_KNOWN_HOSTS exists }; command ssh"
alias sshnew="ssh -o 'StrictHostKeyChecking no' -o 'UserKnownHostsFile $_NEW_KNOWN_HOSTS'"
alias scpnew="scp -o 'StrictHostKeyChecking no' -o 'UserKnownHostsFile $_NEW_KNOWN_HOSTS'"
alias sshtmp="ssh -o 'StrictHostKeyChecking no' -o 'UserKnownHostsFile /dev/null'"
alias scptmp="scp -o 'StrictHostKeyChecking no' -o 'UserKnownHostsFile /dev/null'"

function refresh_ssh_keys {
	if [ -n "$SSH_CONNECTION" ]; then
		if ! ssh-add -l >/dev/null 2>&1 ; then
			for candidate in /tmp/ssh**/agent*(U); do
				export SSH_AUTH_SOCK="$candidate"
				ssh-add -l 2>/dev/null && break
			done
		fi
	fi
}
function refresh_session {
	emulate -L zsh
	local -a cmd; cmd=(${(z)1})

	if [[ $cmd[1] = ssh* || $cmd[1] = git* ]]; then
		refresh_ssh_keys
	fi

	## reload DISPLAY from the master screen process
	#if [[ -n "$STY" ]] && [[ -n "$SSH_CONNECTION" ]]; then
	#	envfile=/proc/${STY%%.*}/environ
	#	if [[ -r "$envfile" ]]; then
	#		newdisplay=$(tr '\0' '\n' <$envfile|grep '^DISPLAY')
	#		if [[ -n "$newdisplay" ]]; then
	#			export $newdisplay
	#		fi
	#	fi
	#fi
}
autoload -U add-zsh-hook
add-zsh-hook preexec refresh_session

# vim:ft=zsh
